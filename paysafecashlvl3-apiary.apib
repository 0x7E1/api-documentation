FORMAT: 1A
HOST: https://apitest.paysafecard.com/v1

# Paysafecash Full Integration / Auto-capture - REST API

Paysafecash is an alternative cash-based payment method that makes it possible to pay securely and easily with cash on the Internet.
Using Paysafecash, products or services can be ordered online and then paid for with cash offline at the nearest payment point by scanning a QR/barcode. 

More information can be found at https://www.paysafecash.com/business. 

# Technical Integration

## About the API
The paysafecard REST API follows <a href="http://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">*RESTful*</a> design principles making it easy to understand and integrate the API.
Representational State Transfer (REST) is a software architecture style, consisting of guidelines for creating scalable web services.

RESTful systems typically communicate over the Hypertext Transfer Protocol with the same HTTP verbs (GET, POST, PUT, DELETE, etc.) used by web browsers to retrieve web pages and send data to remote servers.

It also facilitates solid and universally accepted foundations like [*http basic authentication*](http://en.wikipedia.org/wiki/Basic_access_authentication), [*http verbs*](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods), [*JSON*](http://en.wikipedia.org/wiki/JSON) and [*CORS*](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing).

## Versioning
Every time there is backwards-incompatible change to the API, a new major version will be released. This major version is part of the URL path.
The current major version is *v1*. Unless informed by our technical support department that we are dropping support for a particular API version, you do not need to switch API versions.

## Merchant Service Center
The Business Partner must be registered in the [Merchant Service Center](https://servicecenter.paysafecard.com/merchant-center/) to get the necessary data to connect to the Paysafecash system.

When using the MSC, the Business Partner complies with the provisions of the user manual for the MSC (downloadable from https://www.paysafecash.com/business/downloads).

## Establishing a connection
A connection to the Paysafecash system is successful if the following prerequisites are fulfilled:
- API key for request authentication provided by paysafecard.
- Authorisation of the payment server IP address in the production environment (if a 403 error is received when trying to access the service, it is likely that the IP address is not yet allowed to access).
- Content-type: Please make sure that the content type in the HTTP header, when submitting requests, is set to **Content-Type: application/json**
- Character encoding needs to be in UTF-8

## API key authentication
Every request to the paysafecard API is authenticated using an API key.
- The value of the **API key needs to be base64 encoded** when transmitted in the HTTP header!
- Set the key as the username. [*HTTP basic authentication*](http://en.wikipedia.org/wiki/Basic_access_authentication)
- Your API key may only be used from your backend systems.
- **Please note:** Your API key must be kept secured - never expose the API key to anybody!

Below is an example of how the API key is supposed to be set.

```
Authorization: Basic cHNjX0R4dThqSnI1LVdPYXhLWnpjOXdyMUtNLXd1Y3dZMXg=
```
## Test Environment and Endpoints
Every new business partner needs to first integrate the payment platform on the test environment.
Once the integration is finished, a UAT(User Acceptance Test) needs to be done in order to ensure a seemless integration flow.

- The endpoint for the *test environment* is: https://apitest.paysafecard.com/v1/
- The endpoint for the *production environment* is: https://api.paysafecard.com/v1/

## HTTP status codes
| Code | Short Description     | Description |
| ---  | ---                   | ---         |
| 200  | OK                    | Everything is OK.|
| 201  | Created               | New object was successfully created.|
| 400  | Bad Request           | Missing parameter.|
| 401  | Unauthorized          | Invalid or expired API key.|
| 404  | Not Found             | Not found. This is also returned when you try to retrieve a payment that does not exist.|
| 500  | Internal Server Error | This indicates a general technical error on paysafecard's end.|
| 501  | Not Implemented       | Version feature not implemented.|
| 502  | Bad Gateway           | Invalid response from upstream system.|
| 503  | Service Unavailable   | Server overloaded.|
| 504  | Gateway Timeout       | Timeout from upstream system.|

*Below is an example of an error response:*

```
   400 Bad Request

   {
      "code": "invalid_request_parameter"
      "message": ""must contain 1-10 digits, followed by a decimal separator '.' followed by 2 digits",
      "number": 10028,
      "param": "amount"
   }
   
```

**Please note:** *A list of all the common error codes can be found below at the end of each service section.*

## Interface Guidelines
Paysafecash must be implemented accordingly to the interface guidelines MSC (downloadable from https://www.paysafecash.com/business/downloads) and the instructions in this technical integration document.

# Transaction Flow

![transaction_flow](https://www.paysafecash.com/fileadmin/Dokumente/B2B/transaction_flow_lvl3.PNG "Paysafecash Payment Flow")

A Paysafecash Transaction is processed as follows:
- The customer selects Paysafecash as the preferred payment option in your webshop.

- The Business Partner initiates the payment with the correct amount, currency and other parameters.

- The Business Partner redirects the customer to Paysafecash's hosted bar code application.

- The customer has 30 minutes to login with its Paysafecash username/password and generate a barcode. The barcode will only be valid for this specific transaction. 
    
    The barcode can be viewed in various ways (e.g. online, Paysafecash app, download, e-mail, SMS or iOS / Android passbook file).

- The customer brings the barcode to a Point of Sale, has it scanned and pays for the transaction amount. A predefined time frame ("Transaction Timeout‚Äù) will be available for the payment completion. 

    The duration of this time frame is by default 72 hours, unless specified otherwise by the Business Partner.

- Once the payment is done at the POS, the money will be assigned to the transaction and paysafecard captures the payment on behalf of the Business Partner.

- A webhook notification request is sent to the Business Partner. 

- The Business Partner must verify the webhook notification as described [here](#capture_notification).

- Upon successfuly verifying the webhook notification, the Business Partner completes the transaction in its database and delivers the product/service to the customer.

**Important:** Captured payments are irreversible. The Business Partner cannot cancel the Paysafecash payment at any time during the transaction process.

# Integration on desktop devices

The Paysafecash bar code application should be displayed as a redirect in the same window, on a new browser tab or a new browser window.
Always allow vertical scrolling or dynamic sizing.

# Integration on mobile devices

Paysafecash bar code application is optimised automatically for mobile devices.

# Integration Process Overview

The following steps that need to be completed in order to integrate Paysafecash in a webshop.

+ **Test Data**: paysafecard provides the test data package. This contains an API key (for authentication), merchant account ID and a link to the downloads page.
+ **Integration in the Test Environment**: The Business partner integrates Paysafecash into their test environment. Detailed information about the payment flow and API calls are contained below in this documentation.
+ **Integration Test**: As soon as the integration is completed in the test environment, the Business Partner must provide an URL and 2 test users to paysafecard. The paysafecard integration team will test the integration (technical payment flow and brand assurance).
+ **Productive Data**: Once the integration test is successful, paysafecard provides the productive data (API key).
+ **Switch to Production**: The Business Partner switches the Paysafecash integration to the production environment (change API endpoints and API key).
+ **IP whitelisting**: The Business Partner must whitelist in the Merchant Service Center, the IPs used to connect to the production environment.
+ **Final Check**: The Business Partner provides an URL and 2 test users to paysafecard. The technical support team will then process a real money end-to-end test.
+ **Go-Live**: As soon as the final check is completed successfully, the integration is finished and can be used for end customers.

# Group Payment Process

# Group Payment Information

The following section provides additional information about the payment process.

## Payment status
|Value          |Description    |
|---            |---                                                                 |
|`INITIATED`      |The initial state of a payment after it has been successfully created.    |
|`REDIRECTED`|The customer has been redirected to the bar code application to generate a bar code.|
|`AUTHORIZED`|The customer has paid the transaction amount at a point of sales.|
|`SUCCESS`|The payment has been completed successfully.|
|`CANCELED_MERCHANT`|You, as the business partner, have cancelled the payment.|
|`CANCELED_CUSTOMER`|The customer has cancelled the payment.|
|`EXPIRED`|The customer has not logged in the bar code application for 30 minutes after the transaction has been created or the customer has not paid the transaction in the predefined time frame (default 72 hours).

## Bar code timeout 
As soon a transaction is successfully created and the customer logs in at the bar code application and generates a barcode, the *time frame for payment completion* starts.

This is the time frame in which the customer is able to go to a Point of Sales and pay the transaction amount.
The duration of this time frame is by default 72 hours, unless specified otherwise by the Business Partner.

# Group Payment API Calls

## Initiating a payment [/payments]

Upon successful execution of this request, the `status` of the payment transitions to `INITIATED`.

Using the optional HEADER-Parameter `Correlation-ID` you can set a part of the parameter `id` on your own.

+ Attributes (PaymentRequest)

### Initiating a payment [POST]


The next step is to redirect the customer to the `auth_url`, which is returned as part of the response.

As soon as the customer has authorized the payment, its state will transition to `AUTHORIZED` and the customer will be redirected to the `success_url` you specified when creating the payment.

In addition to redirecting the customer back to your site, we will call the `notification_url` you specified. See more details in the section "Payment notification".

Now you are ready to perform the final step, capturing the payment.

+ Request (application/json)

    + Headers

               Authorization: Basic cHNjX1U5TDMtbzBpM3p4NU92M09uY0tzSjNzOWZndzVTTk0=

    + Attributes (PaymentRequest)
    

+ Response 201 (application/json)

            {
            "object": "PAYMENT",
            "id": "pay_1000000007_Hukab77YIXzKUYMdgPDBQ986ihNUQChu_EUR",
            "created": 1430137532383,
            "updated": 1430137532383,
            "amount": 0.01,
            "currency": "EUR",
            "status": "INITIATED",
            "redirect": {
                "success_url": "http://ok.com/pay_1000000007_Hukab77YIXzKUYMdgPDBQ986ihNUQChu_EUR",
                "failure_url": "http://nok.com/pay_1000000007_Hukab77YIXzKUYMdgPDBQ986ihNUQChu_EUR",
                "auth_url": "https://dv.customer.paysafecard.com/psccustomer/GetCustomerPanelServlet?mid=1000000007&mtid=pay_1000000007_Hukab77YIXzKUYMdgPDBQ986ihNUQChu_EUR&amount=0.01&currency=EUR"
            },
            "customer": {
                "id": "ICuCsrKUmg3pCpTyFNNrPR6K5k36P8Sv"
                },
            "notification_url": "http://ok.com/pay_1000000007_Hukab77YIXzKUYMdgPDBQ986ihNUQChu_EUR"
            }

# Data Structures

## TypedObject (object)
+ type: PAYSAFECARD (required, fixed) - Type of the product, must be set to PAYSAFECARD.

## PaymentRequest (TypedObject)
+ amount: 0.01 (number, required) - Payment amount, precision must be 2 digits after the colon.
`10.00`
+ currency: EUR (required) - ISO 4217 (3 letter ISO currency code).
+ redirect (Redirect, required) - URLs to redirect after successful or failed authorization. The placeholder {payment_id} in the URL is replaced with the actual ID of this payment.
+ `notification_url`: https://notification.com/{payment_id} (required)- Notification URL we will contact after the authorization has been successfully completed. The placeholder {payment_id} in the URL is replaced with the actual ID of this payment.
+ customer (object) 
    + `id`: merchantclientid5HzDvoZSodKDJ7X7VQKrtestAutomation (required) - Only the id is mandatory. It¬¥s value uniquely identifies the customer and is provided by you. If any personal data e.g. customer¬¥s user name, email address, is used here, it has to be encrypted or hashed for security reasons.  
    + min_age: 18 (optional) - Restricts payments to customers only, who are equal to or older than the specified age. 
    + kyc_level: SIMPLE (optional) - Valid values SIMPLE or FULL. These values refer to the KYC level of the customer's account. Depending on the country, accounts are offered with SIMPLE and/or FULL customer identification. 
    + country_restriction: AT (optional) - ISO 3166-1 alpha-2 two-letter country code used to restrict payments to residents of a particular country.
+ submerchant_id: 1 - ReportingCriterion (optional) - Also called ‚Äòreporting criteria‚Äô, offers the possibility to classify sub-merchants. Agreement with paysafecard needed - not agreed values lead to a failed payment.
+ shop_id: `shop1` (optional) - Identification of the shop which is the originator of the request. This is most likely used by payment service providers who act as a proxy for other payment methods as well.
+ `expiration_time_minutes`: 4320 (optional) - Time frame the customer is given to go to the Point of Sales and pay for the transaction. For further details, please see "Variable Transaction Timeout".
+ `customer_takeover_data` (object) 
    + `first_name`: `Max`
    + `last_name`: `Mustermann`
    + `date_of_birth`: `1990-12-31`
    + `address1`: `Musterstrasse 2`
    + `postcode`: 1234
    + `city`: `Vienna`
    + `country_iso2`: `AT`
    + `phone_number`: `+43676123456789`
    + `email`: `example@test.at`
    + `hash`: `d5HzDvoZSodKDJ7X7VQKr`

## PaymentResponse (TypedObject)
+ id: pay_1000000007_k3JfFMcpLPXGMk1mOdkbmRARdr5kKQeI_EUR - The unique id of this payment
+ created: 1430317131908 (number)
+ updated: 1430317131908 (number)
+ amount: 0.01 (number)
+ currency: EUR (required) - ISO 4217 (3 letter ISO currency code).
+ status: SUCCESS
+ redirect (Redirect)
+ `notification_url`: https://notification.com/{payment_id} (required)- Notification URL we will contact after the authorization has been successfully completed. The placeholder {payment_id} in the URL is replaced with the actual ID of this payment.
+ customer (CustomerResponseFull)
+ card_details (array[CardDetails])

## CardDetails (object)
+ serial: 1453591278
+ currency: EUR
+ amount: 0.01
+ type: 00002
+ country: AT 

## CustomerResponseFull (object)
+ id
+ account_id
+ first_name: xApuEWppcYCptzoRnykkNuKznx
+ last_name: DbHILeEKPCRTCFuGbHKByYtbCm
+ email: psc.mypins+TEST_MOXSMYkqkkwWDH@gmail.com - the customer identifier
+ age
+ kyc_level
+ currency

## Redirect (object)
+ `success_url`: https://ok.com/{payment_id}
+ `failure_url`: https://nok.com/{payment_id}

## CustomerTakeoverData (object)
+ `first_name`: `Max`,
+ `last_name`: `Mustermann`,
+ `date_of_birth`: `1990-12-31`,
+ `address1`: `Musterstrasse 2`,
+ `postcode`: `1234`,
+ `city`: `Vienna`,
+ `country_iso2`: `AT`,
+ `phone_number`: `+43676123456789`,
+ `email`: `example@test.at`,
+ `hash`: `d5HzDvoZSodKDJ7X7VQKr`

## RefundRequest (TypedObject)
+ amount: 00.01 (number, required)
+ currency: EUR (required)
+ customer (object, required)
    + id: merchantclientid5HzDvoZSodKDJ7X7VQKrtestAutomation (required) 
    + email: psc.mypins+9000001500_xZteDVTw@gmail.com (required)

## RefundValidationRequest (RefundRequest)
+ capture: true (boolean, required)

## RefundCaptureRequest (RefundRequest)
+ capture: true (boolean, required)

## RefundResponse (object)
+ object: refund - Type of object, always refund
+ id: ref_1000000007_2838fhsd6dashsdkfsd_EUR
+ created: 1430137532383 (number)
+ updated: 1430137532383 (number)
+ currency: EUR
+ amount: 10.00
+ customer (object)
    + id: merchantclientid5HzDvoZSodKDJ7X7VQKrtestAutomation
    + email: valid@email.com
+ status : SUCCESSFULEUpdated